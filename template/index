<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WebGIS</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        /* Estilos b√°sicos */
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: Helvetica, sans-serif;
        }
        #container {
            display: flex;
            width: 100%;
            height: 100vh;
            position: relative;
            overflow: hidden;
        }
        #map {
            flex: 1;
            height: 100%;
            transition: margin-right 0.3s ease;
        }
        #sidebar {
            width: 300px; /* Largura da aba */
            height: 100%;
            background-color: #f9f9f9;
            box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
            position: absolute;
            right: -300px; /* Esconde a aba */
            transition: right 0.3s ease;
            z-index: 1000;
        }
        #sidebar-handle {
            position: absolute;
            left: -20px; 
            top: 50%;
            transform: translateY(-50%);
            width: 20px;
            height: 60px;
            background-color: #ff4d4d;
            border-radius: 5px 0 0 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 18px;
        }
        #attribute-table h3 {
            font-size: 16px; /* Ajuste o tamanho da fonte */
            font-weight: bold; /* Deixa em negrito */
            text-align: center; /* Centraliza o texto */
            margin-bottom: 8px; /* Reduz o espa√ßamento inferior */
        }
        #attribute-table {
            padding: 20px;
            overflow-y: auto;
            height: calc(100% - 40px);
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            font-size: 10px;
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background: #f8f8f8;
        }
        tr:hover {
            background: #f1f1f1;
        }
        .highlighted {
            background: #d1e7ff !important;
        }
        .basemap-thumbnail {
            position: absolute;
            bottom: 10px;
            right: 10px;
            z-index: 1000;
            width: 80px;
            height: 80px;
            border: 2px solid white;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            cursor: pointer;
            overflow: hidden;
            background-color: white;
        }
        .basemap-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .geometry-thumbnail {
            position: absolute;
            bottom: 100px; 
            right: 10px;
            z-index: 1000;
            width: 80px;
            background-color: white;
            border: 2px solid white;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            padding: 5px;
        }

        .geometry-thumbnail button {
            display: block;
            width: 100%;
            margin-bottom: 5px;
            background-color: #f9f9f9;
            color: #333;
            border: 1px solid #ddd;
            padding: 5px;
            cursor: pointer;
            border-radius: 3px;
            text-align: center;
        }

        .geometry-thumbnail button:hover {
            background-color: #ddd;
        }
    </style>
</head>
<body>
    <div id="container">
        <!-- Mapa -->
        <div id="map">
            <!-- Miniatura do mapa base -->
            <div id="basemap-thumbnail" class="basemap-thumbnail">
                <img id="thumbnail-image" src="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/0/0/0" alt="Alternar Mapa Base">
            </div>

            <!-- Thumbnail de sele√ß√£o de geometria -->
            <div id="geometry-thumbnail" class="geometry-thumbnail">
                <button onclick="setDrawingMode('point')">üìç Ponto</button>
                <button onclick="setDrawingMode('line')">üñçÔ∏è Linha</button>
                <button onclick="setDrawingMode('polygon')">üî≤ √Årea</button>
            </div>
        </div>

        <!-- Aba lateral -->
        <div id="sidebar">
            <!-- Puxador -->
            <div id="sidebar-handle" onclick="toggleSidebar()"></div>
            <!-- Tabela de atributos -->
            <div id="attribute-table">
                <h3>Pontos</h3>
                <table id="points-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Nome</th>
                            <th>Observa√ß√£o</th>
                            <th>A√ß√µes</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

                <h3>Linhas</h3>
                <table id="lines-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>A√ß√µes</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

                <h3>Pol√≠gonos</h3>
                <table id="polygons-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>A√ß√µes</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
    <script>
        const markers = {};
        const lines = {};
        const polygons = {};
        let drawingMode = null;
        let currentLine = null;
        let currentPolygon = null;

        const map = L.map('map', {
            center: [-23.5505, -46.6333],
            zoom: 10
        });

        const osmLayer = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors'
        });

        const satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: '¬© Esri'
        });

        osmLayer.addTo(map);
        let currentLayer = osmLayer;

        L.control.scale().addTo(map);

        const compassControl = L.control({ position: 'bottomleft' });
        compassControl.onAdd = () => {
            const div = L.DomUtil.create('div', 'compass-control');
            div.innerHTML = '&#8593;';
            return div;
        };
        compassControl.addTo(map);

        // Alternar entre mapas base
        function toggleBasemap() {
            if (map.hasLayer(osmLayer)) {
                map.removeLayer(osmLayer);
                map.addLayer(satelliteLayer);
                currentLayer = satelliteLayer;
                document.getElementById('thumbnail-image').src = 'https://tile.openstreetmap.org/0/0/0.png';
            } else {
                map.removeLayer(satelliteLayer);
                map.addLayer(osmLayer);
                currentLayer = osmLayer;
                document.getElementById('thumbnail-image').src = 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/0/0/0';
            }
        }

        // Alternar a visibilidade da barra lateral
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const mapDiv = document.getElementById('map');
            const isOpen = sidebar.style.right === '0px';
            sidebar.style.right = isOpen ? '-300px' : '0px';
            mapDiv.style.marginRight = isOpen ? '0' : '300px';
            sidebar.setAttribute('data-open', !isOpen);
        }

        // Definir o modo de desenho
        function setDrawingMode(mode) {
            drawingMode = mode;
            if (mode === 'line' || mode === 'polygon') {
                const finishButton = document.createElement('button');
                finishButton.innerText = 'Finalizar';
                finishButton.onclick = () => {
                    if (drawingMode === 'line' && currentLine) {
                        saveLine(currentLine.getLatLngs());
                        currentLine = null;
                    } else if (drawingMode === 'polygon' && currentPolygon) {
                        savePolygon(currentPolygon.getLatLngs());
                        currentPolygon = null;
                    }
                    document.getElementById('geometry-thumbnail').removeChild(finishButton);
                };
                document.getElementById('geometry-thumbnail').appendChild(finishButton);
            }
        }

        // Salvar uma linha no servidor
        async function saveLine(coordinates) {
            // Converter coordenadas de [lat, lng] para [lng, lat]
            const formattedCoordinates = coordinates.map(coord => [coord.lng, coord.lat]);
            
            await fetch('/add_line', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `coordinates=${JSON.stringify(formattedCoordinates)}`
            });
            const newFeature = await response.json();

            // Adiciona a linha diretamente ao mapa
            const newLine = L.polyline(coordinates, { color: 'blue' }).addTo(map)
                .bindPopup(`
                    <b>ID:</b> ${Object.keys(lines).length + 1}<br>
                    <button onclick="deleteFeature('lines-table', ${Object.keys(lines).length + 1})">Deletar</button>
                `);
            lines[Object.keys(lines).length + 1] = newLine;
            addRowToTable('lines-table', newFeature);

            loadData();
        }

        // Salvar um pol√≠gono no servidor
        async function savePolygon(coordinates) {
            const formattedCoordinates = coordinates.map(coord => [coord.lng, coord.lat]);
            if (formattedCoordinates[0].toString() !== formattedCoordinates[formattedCoordinates.length - 1].toString()) {
                formattedCoordinates.push(formattedCoordinates[0]);
            }

            const polygonCoordinates = [formattedCoordinates];

            await fetch('/add_polygon', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `coordinates=${JSON.stringify(polygonCoordinates)}`
            });

            const newPolygon = L.polygon(coordinates, { color: 'green' }).addTo(map)
                .bindPopup(`
                    <b>ID:</b> ${Object.keys(polygons).length + 1}<br>
                    <button onclick="deleteFeature('polygons-table', ${Object.keys(polygons).length + 1})">Deletar</button>
                `);
            polygons[Object.keys(polygons).length + 1] = newPolygon;

            loadData();
        }

        // Manipular cliques no mapa
        async function onMapClick(e) {
            if (drawingMode === 'point') {
                const { lat, lng } = e.latlng;
                const name = prompt("Digite o nome do ponto:");
                if (!name?.trim()) return alert("O nome do ponto √© obrigat√≥rio!");
                const obs = prompt("Digite uma observa√ß√£o:") || "";

                await fetch('/add_point', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `latitude=${lat}&longitude=${lng}&name=${encodeURIComponent(name)}&obs=${encodeURIComponent(obs)}`
                });

                // Adiciona o marcador diretamente ao mapa
                const newMarker = L.marker([lat, lng]).addTo(map)
                    .bindPopup(`
                        <b>ID:</b> ${markers.length + 1}<br>
                        <b>Nome:</b> ${name}<br>
                        <b>Observa√ß√£o:</b> ${obs}<br>
                        <button onclick="deleteFeature('points-table', ${markers.length + 1})">Deletar</button>
                    `);
                markers[markers.length + 1] = newMarker;

                    // Atualiza a tabela de atributos
                loadData();
            } else if (drawingMode === 'line') {
                if (!currentLine) {
                    currentLine = L.polyline([e.latlng], { color: 'blue' }).addTo(map);
                } else {
                    currentLine.addLatLng(e.latlng);
                }
            } else if (drawingMode === 'polygon') {
                if (!currentPolygon) {
                    currentPolygon = L.polygon([e.latlng], { color: 'green' }).addTo(map);
                } else {
                    currentPolygon.addLatLng(e.latlng);
                }
            }
        }

        // Carregar dados do servidor
        async function loadData() {
            const pointsResponse = await fetch('/get_points');
            const pointsData = await pointsResponse.json();
            updateTable(pointsData.features, 'points-table', updateMarkers);

            const linesResponse = await fetch('/get_lines');
            const linesData = await linesResponse.json();
            updateTable(linesData.features, 'lines-table', updateLines);

            const polygonsResponse = await fetch('/get_polygons');
            const polygonsData = await polygonsResponse.json();
            updateTable(polygonsData.features, 'polygons-table', updatePolygons);
        }

        // Atualizar a tabela de atributos
        function updateTable(features, tableId, updateFunction) {
            const tableBody = document.querySelector(`#${tableId} tbody`);
            tableBody.innerHTML = features.map(feature => `
                <tr onclick="highlightFeature('${tableId}', ${feature.properties.id})">
                    <td>${feature.properties.id}</td>
                    ${tableId === 'points-table' ? `
                        <td>${feature.properties.name}</td>
                        <td>${feature.properties.obs}</td>
                    ` : ''}
                    <td>
                        <button onclick="editFeature('${tableId}', ${feature.properties.id})">Editar</button>
                        <button onclick="deleteFeature('${tableId}', ${feature.properties.id})">Deletar</button>
                    </td>
                </tr>
            `).join('');
            updateFunction(features);
        }

        // Atualizar marcadores no mapa
        function updateMarkers(features) {
            Object.values(markers).forEach(marker => marker.remove());
            features.forEach(feature => {
                const [lng, lat] = feature.geometry.coordinates;
                markers[feature.properties.id] = L.marker([lat, lng]).addTo(map)
                    .bindPopup(`
                        <b>ID:</b> ${feature.properties.id}<br>
                        <b>Nome:</b> ${feature.properties.name}<br>
                        <b>Observa√ß√£o:</b> ${feature.properties.obs}<br>
                        <button onclick="deleteFeature('points-table', ${feature.properties.id})">Deletar</button>
                    `);
            });
        }

        // Atualizar linhas no mapa
        function updateLines(features) {
            Object.values(lines).forEach(line => line.remove());
            features.forEach(feature => {
                const coordinates = feature.geometry.coordinates.map(coord => [coord[1], coord[0]]);
                lines[feature.properties.id] = L.polyline(coordinates, { color: 'blue' }).addTo(map)
                    .bindPopup(`
                        <b>ID:</b> ${feature.properties.id}<br>
                        <button onclick="deleteFeature('lines-table', ${feature.properties.id})">Deletar</button>
                    `);
            });
        }

        // Atualizar pol√≠gonos no mapa
        function updatePolygons(features) {
            Object.values(polygons).forEach(polygon => polygon.remove());
            features.forEach(feature => {
                const coordinates = feature.geometry.coordinates[0].map(coord => [coord[1], coord[0]]);
                polygons[feature.properties.id] = L.polygon(coordinates, { color: 'green' }).addTo(map)
                    .bindPopup(`
                        <b>ID:</b> ${feature.properties.id}<br>
                        <button onclick="deleteFeature('polygons-table', ${feature.properties.id})">Deletar</button>
                    `);
            });
        }

        // Destacar um recurso no mapa
        function highlightFeature(tableId, id) {
            document.querySelectorAll(`#${tableId} tbody tr`).forEach(row => row.classList.remove('highlighted'));
            const row = document.querySelector(`#${tableId} tbody tr td:first-child:contains('${id}')`).parentNode;
            row.classList.add('highlighted');

            if (tableId === 'points-table' && markers[id]) {
                map.setView(markers[id].getLatLng(), 15);
                markers[id].openPopup();
            } else if (tableId === 'lines-table' && lines[id]) {
                map.setView(lines[id].getBounds().getCenter(), 15);
                lines[id].openPopup();
            } else if (tableId === 'polygons-table' && polygons[id]) {
                map.setView(polygons[id].getBounds().getCenter(), 15);
                polygons[id].openPopup();
            }
        }

        // Editar um recurso
        async function editFeature(tableId, id) {
            if (tableId === 'points-table') {
                const name = prompt("Digite o novo nome do ponto:");
                if (!name?.trim()) return alert("O nome do ponto √© obrigat√≥rio!");
                const obs = prompt("Digite uma nova observa√ß√£o:") || "";

                await fetch('/update_point', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `id=${id}&name=${encodeURIComponent(name)}&obs=${encodeURIComponent(obs)}`
                });
            } else if (tableId === 'lines-table') {
                const newCoordinates = prompt("Digite as novas coordenadas (formato JSON):");
                if (!newCoordinates) return alert("Coordenadas inv√°lidas!");

                await fetch('/update_line', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `id=${id}&coordinates=${encodeURIComponent(newCoordinates)}`
                });
            } else if (tableId === 'polygons-table') {
                const newCoordinates = prompt("Digite as novas coordenadas (formato JSON):");
                if (!newCoordinates) return alert("Coordenadas inv√°lidas!");

                await fetch('/update_polygon', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `id=${id}&coordinates=${encodeURIComponent(newCoordinates)}`
                });
            }
            loadData();
        }

        // Deletar um recurso
        async function deleteFeature(tableId, id) {
            if (confirm("Tem certeza que deseja deletar este item?")) {
                let endpoint = '';
                if (tableId === 'points-table') endpoint = '/delete_point';
                else if (tableId === 'lines-table') endpoint = '/delete_line';
                else if (tableId === 'polygons-table') endpoint = '/delete_polygon';

                await fetch(endpoint, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `id=${id}`
                });
                loadData();
            }
        }

        // Event listeners
        map.on('click', onMapClick);
        document.getElementById('basemap-thumbnail').addEventListener('click', e => {
            e.stopPropagation();
            toggleBasemap();
        });

        // Interrompe a propaga√ß√£o do clique nos bot√µes de geometria
        document.querySelectorAll('.geometry-thumbnail button').forEach(button => {
            button.addEventListener('click', e => e.stopPropagation());
        });

        // Carregar dados iniciais
        loadData();
    </script>
</body>
</html>
