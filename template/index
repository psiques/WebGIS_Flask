<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Visualização de Pontos de Interesse</title>
    <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/>
    <style>
        /* Container principal */
        #container {
            display: flex;
            width: 100%;
            height: 100vh;
        }

        /* Mapa */
        #map {
            flex: 3;
            height: 100%;
            position: relative; /* Para posicionar a miniatura dentro do mapa */
        }

        /* Tabela de atributos */
        #attribute-table {
            flex: 1;
            padding: 20px;
            background-color: #f9f9f9;
            overflow-y: auto;
            box-shadow: -2px 0 5px rgba(0, 0, 0, 0.1);
        }

        /* Estilo da tabela */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f1ebeb;
        }

        td[contenteditable="true"] {
            background-color: #fff;
        }

        /* Linha destacada */
        tr.highlighted {
            background-color: #e0f7fa;
        }

        /* Botões */
        button {
            background-color: #ff4d4d;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 3px;
        }

        button:hover {
            background-color: #cc0000;
        }

        /* Estilo da bússola */
        .compass-control {
            background: rgba(255, 255, 255, 0.8);
            padding: 5px;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
        }

        /* Miniatura do mapa base */
        .basemap-thumbnail {
            position: absolute;
            bottom: 10px; /* Ajuste para ficar acima do texto de atribuição */
            right: 10px;
            z-index: 1000;
            width: 80px; /* Tamanho menor para não atrapalhar */
            height: 80px;
            border: 2px solid white;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            cursor: pointer;
            overflow: hidden;
            background-color: white; /* Fundo branco para destacar */
        }

        .basemap-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    </style>
</head>
<body>
    <div id="container">
        <div id="map">
            <!-- Miniatura do mapa base -->
            <div id="basemap-thumbnail" class="basemap-thumbnail">
                <img id="thumbnail-image" src="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/0/0/0" alt="Alternar Mapa Base">
            </div>
        </div>
        <div id="attribute-table">
            <h3>Tabela de Atributos</h3>
            <table id="points-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nome</th>
                        <th>Observação</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Linhas serão preenchidas dinamicamente -->
                </tbody>
            </table>
        </div>
    </div>

    <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
    <script>
        // Variável para armazenar os marcadores
        var markers = {};

        // Posicionando o mapa inicial
        var mapOptions = {
            center: [-23.5505, -46.6333],
            zoom: 10
        };

        // Criando o mapa
        var map = new L.map('map', mapOptions);

        // Definindo camadas de mapa base
        var osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        });

        var satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: '© Esri'
        });

        // Adicionando a camada padrão (OpenStreetMap)
        osmLayer.addTo(map);
        var currentLayer = osmLayer;

        // Função para alternar o mapa base
        function toggleBasemap() {
            if (map.hasLayer(osmLayer)) {
                map.removeLayer(osmLayer);
                map.addLayer(satelliteLayer);
                currentLayer = satelliteLayer;
                document.getElementById('thumbnail-image').src = 'https://tile.openstreetmap.org/0/0/0.png'; // Miniatura do OSM
            } else {
                map.removeLayer(satelliteLayer);
                map.addLayer(osmLayer);
                currentLayer = osmLayer;
                document.getElementById('thumbnail-image').src = 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/0/0/0'; // Miniatura do Satélite
            }
        }

        // Adicionar escala ao mapa
        L.control.scale().addTo(map);

        // Criar um controle personalizado para a bússola
        var compassControl = L.control({ position: 'bottomleft' });

        compassControl.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'compass-control');
            div.innerHTML = '&#8593;'; // Símbolo de seta para cima (norte)
            div.style.fontSize = '24px';
            div.style.cursor = 'pointer';
            div.style.color = '#333';
            div.style.textShadow = '0 0 3px white';
            return div;
        };

        compassControl.addTo(map);

        // Função para carregar os pontos no mapa
        function loadPoints() {
            fetch('/get_points')
                .then(response => response.json())
                .then(data => {
                    data.features.forEach(feature => {
                        var coordinates = feature.geometry.coordinates;
                        var marker = L.marker([coordinates[1], coordinates[0]]).addTo(map);
                        marker.bindPopup(`
                            <b>ID:</b> ${feature.properties.id}<br>
                            <b>Nome:</b> ${feature.properties.name}<br>
                            <b>Observação:</b> ${feature.properties.obs}<br>
                            <button onclick="deletePoint(${feature.properties.id})">Deletar</button>
                        `);
                        markers[feature.properties.id] = marker; // Armazenar o marcador
                    });
                })
                .catch(error => console.error('Erro ao carregar pontos:', error));
        }

        // Função para carregar os pontos na tabela
        function loadTable() {
            fetch('/get_points')
                .then(response => response.json())
                .then(data => {
                    var tableBody = document.querySelector('#points-table tbody');
                    tableBody.innerHTML = ''; // Limpar a tabela

                    data.features.forEach(feature => {
                        var row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${feature.properties.id}</td>
                            <td contenteditable="true" data-field="name" onblur="updatePoint(${feature.properties.id}, 'name', this.innerText)">${feature.properties.name}</td>
                            <td contenteditable="true" data-field="obs" onblur="updatePoint(${feature.properties.id}, 'obs', this.innerText)">${feature.properties.obs}</td>
                            <td><button onclick="deletePoint(${feature.properties.id})">Deletar</button></td>
                        `;
                        row.addEventListener('click', () => highlightPoint(feature.properties.id));
                        tableBody.appendChild(row);
                    });
                })
                .catch(error => console.error('Erro ao carregar pontos:', error));
        }

        // Função para adicionar um novo ponto
        function onMapClick(e) {
            var clickedLatLng = e.latlng;
            var latitude = clickedLatLng.lat;
            var longitude = clickedLatLng.lng;

            var name = prompt("Digite o nome do ponto:");
            var obs = prompt("Digite uma observação:");

            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/add_point', true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                    console.log(xhr.responseText);
                    loadTable(); // Recarregar a tabela após adicionar
                    loadPoints(); // Recarregar os pontos no mapa
                }
            };
            xhr.send(`latitude=${latitude}&longitude=${longitude}&name=${encodeURIComponent(name)}&obs=${encodeURIComponent(obs)}`);
        }

        // Função para atualizar um ponto
        function updatePoint(id, field, value) {
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/update_point', true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                    console.log(xhr.responseText);
                    // Atualizar o conteúdo da célula editável
                    var cell = document.querySelector(`#points-table tbody tr td:first-child:contains('${id}')`).parentNode.querySelector(`td[data-field="${field}"]`);
                    cell.innerText = value;
                }
            };
            xhr.send(`id=${id}&${field}=${encodeURIComponent(value)}`);
        }

        // Função para deletar um ponto
        function deletePoint(id) {
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/delete_point', true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
            xhr.onreadystatechange = function() {
                if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                    console.log(xhr.responseText);
                    loadTable(); // Recarregar a tabela após deletar
                    loadPoints(); // Recarregar os pontos no mapa
                }
            };
            xhr.send(`id=${id}`);
        }

        // Função para destacar um ponto na tabela e no mapa
        function highlightPoint(id) {
            // Remover destaque de todas as linhas
            var rows = document.querySelectorAll('#points-table tbody tr');
            rows.forEach(row => row.classList.remove('highlighted'));

            // Destacar a linha clicada
            var row = document.querySelector(`#points-table tbody tr td:first-child:contains('${id}')`).parentNode;
            row.classList.add('highlighted');

            // Centralizar o mapa no ponto
            if (markers[id]) {
                map.setView(markers[id].getLatLng(), 15);
                markers[id].openPopup();
            }
        }

        // Carregar tabela e pontos ao iniciar
        document.addEventListener('DOMContentLoaded', function() {
            loadPoints();
            loadTable();
        });

        // Adicionar evento de clique no mapa
        map.on('click', onMapClick);

        // Evitar que o clique na miniatura crie um novo ponto
        document.getElementById('basemap-thumbnail').addEventListener('click', function(e) {
            e.stopPropagation();
            toggleBasemap();
        });
    </script>
</body>
</html>
